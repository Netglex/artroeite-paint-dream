// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "pixel_info.proto" (syntax proto3)
// tslint:disable
import { Empty } from "./google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * @generated from protobuf message PixelInfoHistoriesDto
 */
export interface PixelInfoHistoriesDto {
    /**
     * @generated from protobuf field: repeated PixelInfoHistoryDto Histories = 1 [json_name = "Histories"];
     */
    histories: PixelInfoHistoryDto[];
}
/**
 * @generated from protobuf message PixelInfoHistoryDto
 */
export interface PixelInfoHistoryDto {
    /**
     * @generated from protobuf field: PositionDto Position = 1 [json_name = "Position"];
     */
    position?: PositionDto;
    /**
     * @generated from protobuf field: repeated PixelInfoDto History = 2 [json_name = "History"];
     */
    history: PixelInfoDto[];
}
/**
 * @generated from protobuf message PixelInfoDto
 */
export interface PixelInfoDto {
    /**
     * @generated from protobuf field: google.protobuf.Timestamp CreationDate = 1 [json_name = "CreationDate"];
     */
    creationDate?: Timestamp;
    /**
     * @generated from protobuf field: ColorDto Color = 2 [json_name = "Color"];
     */
    color?: ColorDto;
}
/**
 * @generated from protobuf message CreatePixelInfosDto
 */
export interface CreatePixelInfosDto {
    /**
     * @generated from protobuf field: repeated CreatePixelInfoDto PixelInfos = 1 [json_name = "PixelInfos"];
     */
    pixelInfos: CreatePixelInfoDto[];
}
/**
 * @generated from protobuf message CreatePixelInfoDto
 */
export interface CreatePixelInfoDto {
    /**
     * @generated from protobuf field: PositionDto Position = 1 [json_name = "Position"];
     */
    position?: PositionDto;
    /**
     * @generated from protobuf field: ColorDto Color = 2 [json_name = "Color"];
     */
    color?: ColorDto;
}
/**
 * @generated from protobuf message FullPixelInfosDto
 */
export interface FullPixelInfosDto {
    /**
     * @generated from protobuf field: repeated FullPixelInfoDto PixelInfos = 1 [json_name = "PixelInfos"];
     */
    pixelInfos: FullPixelInfoDto[];
}
/**
 * @generated from protobuf message FullPixelInfoDto
 */
export interface FullPixelInfoDto {
    /**
     * @generated from protobuf field: PositionDto Position = 1 [json_name = "Position"];
     */
    position?: PositionDto;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp CreationDate = 2 [json_name = "CreationDate"];
     */
    creationDate?: Timestamp;
    /**
     * @generated from protobuf field: ColorDto Color = 3 [json_name = "Color"];
     */
    color?: ColorDto;
}
/**
 * @generated from protobuf message PositionDto
 */
export interface PositionDto {
    /**
     * @generated from protobuf field: int32 X = 1 [json_name = "X"];
     */
    x: number;
    /**
     * @generated from protobuf field: int32 Y = 2 [json_name = "Y"];
     */
    y: number;
}
/**
 * @generated from protobuf message ColorDto
 */
export interface ColorDto {
    /**
     * @generated from protobuf field: float R = 1 [json_name = "R"];
     */
    r: number;
    /**
     * @generated from protobuf field: float G = 2 [json_name = "G"];
     */
    g: number;
    /**
     * @generated from protobuf field: float B = 3 [json_name = "B"];
     */
    b: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class PixelInfoHistoriesDto$Type extends MessageType<PixelInfoHistoriesDto> {
    constructor() {
        super("PixelInfoHistoriesDto", [
            { no: 1, name: "Histories", kind: "message", jsonName: "Histories", repeat: 1 /*RepeatType.PACKED*/, T: () => PixelInfoHistoryDto }
        ]);
    }
    create(value?: PartialMessage<PixelInfoHistoriesDto>): PixelInfoHistoriesDto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.histories = [];
        if (value !== undefined)
            reflectionMergePartial<PixelInfoHistoriesDto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PixelInfoHistoriesDto): PixelInfoHistoriesDto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated PixelInfoHistoryDto Histories = 1 [json_name = "Histories"];*/ 1:
                    message.histories.push(PixelInfoHistoryDto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PixelInfoHistoriesDto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated PixelInfoHistoryDto Histories = 1 [json_name = "Histories"]; */
        for (let i = 0; i < message.histories.length; i++)
            PixelInfoHistoryDto.internalBinaryWrite(message.histories[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PixelInfoHistoriesDto
 */
export const PixelInfoHistoriesDto = new PixelInfoHistoriesDto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PixelInfoHistoryDto$Type extends MessageType<PixelInfoHistoryDto> {
    constructor() {
        super("PixelInfoHistoryDto", [
            { no: 1, name: "Position", kind: "message", jsonName: "Position", T: () => PositionDto },
            { no: 2, name: "History", kind: "message", jsonName: "History", repeat: 1 /*RepeatType.PACKED*/, T: () => PixelInfoDto }
        ]);
    }
    create(value?: PartialMessage<PixelInfoHistoryDto>): PixelInfoHistoryDto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.history = [];
        if (value !== undefined)
            reflectionMergePartial<PixelInfoHistoryDto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PixelInfoHistoryDto): PixelInfoHistoryDto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PositionDto Position = 1 [json_name = "Position"];*/ 1:
                    message.position = PositionDto.internalBinaryRead(reader, reader.uint32(), options, message.position);
                    break;
                case /* repeated PixelInfoDto History = 2 [json_name = "History"];*/ 2:
                    message.history.push(PixelInfoDto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PixelInfoHistoryDto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PositionDto Position = 1 [json_name = "Position"]; */
        if (message.position)
            PositionDto.internalBinaryWrite(message.position, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated PixelInfoDto History = 2 [json_name = "History"]; */
        for (let i = 0; i < message.history.length; i++)
            PixelInfoDto.internalBinaryWrite(message.history[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PixelInfoHistoryDto
 */
export const PixelInfoHistoryDto = new PixelInfoHistoryDto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PixelInfoDto$Type extends MessageType<PixelInfoDto> {
    constructor() {
        super("PixelInfoDto", [
            { no: 1, name: "CreationDate", kind: "message", jsonName: "CreationDate", T: () => Timestamp },
            { no: 2, name: "Color", kind: "message", jsonName: "Color", T: () => ColorDto }
        ]);
    }
    create(value?: PartialMessage<PixelInfoDto>): PixelInfoDto {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PixelInfoDto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PixelInfoDto): PixelInfoDto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp CreationDate = 1 [json_name = "CreationDate"];*/ 1:
                    message.creationDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.creationDate);
                    break;
                case /* ColorDto Color = 2 [json_name = "Color"];*/ 2:
                    message.color = ColorDto.internalBinaryRead(reader, reader.uint32(), options, message.color);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PixelInfoDto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp CreationDate = 1 [json_name = "CreationDate"]; */
        if (message.creationDate)
            Timestamp.internalBinaryWrite(message.creationDate, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* ColorDto Color = 2 [json_name = "Color"]; */
        if (message.color)
            ColorDto.internalBinaryWrite(message.color, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PixelInfoDto
 */
export const PixelInfoDto = new PixelInfoDto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreatePixelInfosDto$Type extends MessageType<CreatePixelInfosDto> {
    constructor() {
        super("CreatePixelInfosDto", [
            { no: 1, name: "PixelInfos", kind: "message", jsonName: "PixelInfos", repeat: 1 /*RepeatType.PACKED*/, T: () => CreatePixelInfoDto }
        ]);
    }
    create(value?: PartialMessage<CreatePixelInfosDto>): CreatePixelInfosDto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pixelInfos = [];
        if (value !== undefined)
            reflectionMergePartial<CreatePixelInfosDto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreatePixelInfosDto): CreatePixelInfosDto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CreatePixelInfoDto PixelInfos = 1 [json_name = "PixelInfos"];*/ 1:
                    message.pixelInfos.push(CreatePixelInfoDto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreatePixelInfosDto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CreatePixelInfoDto PixelInfos = 1 [json_name = "PixelInfos"]; */
        for (let i = 0; i < message.pixelInfos.length; i++)
            CreatePixelInfoDto.internalBinaryWrite(message.pixelInfos[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreatePixelInfosDto
 */
export const CreatePixelInfosDto = new CreatePixelInfosDto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreatePixelInfoDto$Type extends MessageType<CreatePixelInfoDto> {
    constructor() {
        super("CreatePixelInfoDto", [
            { no: 1, name: "Position", kind: "message", jsonName: "Position", T: () => PositionDto },
            { no: 2, name: "Color", kind: "message", jsonName: "Color", T: () => ColorDto }
        ]);
    }
    create(value?: PartialMessage<CreatePixelInfoDto>): CreatePixelInfoDto {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreatePixelInfoDto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreatePixelInfoDto): CreatePixelInfoDto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PositionDto Position = 1 [json_name = "Position"];*/ 1:
                    message.position = PositionDto.internalBinaryRead(reader, reader.uint32(), options, message.position);
                    break;
                case /* ColorDto Color = 2 [json_name = "Color"];*/ 2:
                    message.color = ColorDto.internalBinaryRead(reader, reader.uint32(), options, message.color);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreatePixelInfoDto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PositionDto Position = 1 [json_name = "Position"]; */
        if (message.position)
            PositionDto.internalBinaryWrite(message.position, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* ColorDto Color = 2 [json_name = "Color"]; */
        if (message.color)
            ColorDto.internalBinaryWrite(message.color, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreatePixelInfoDto
 */
export const CreatePixelInfoDto = new CreatePixelInfoDto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FullPixelInfosDto$Type extends MessageType<FullPixelInfosDto> {
    constructor() {
        super("FullPixelInfosDto", [
            { no: 1, name: "PixelInfos", kind: "message", jsonName: "PixelInfos", repeat: 1 /*RepeatType.PACKED*/, T: () => FullPixelInfoDto }
        ]);
    }
    create(value?: PartialMessage<FullPixelInfosDto>): FullPixelInfosDto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pixelInfos = [];
        if (value !== undefined)
            reflectionMergePartial<FullPixelInfosDto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FullPixelInfosDto): FullPixelInfosDto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated FullPixelInfoDto PixelInfos = 1 [json_name = "PixelInfos"];*/ 1:
                    message.pixelInfos.push(FullPixelInfoDto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FullPixelInfosDto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated FullPixelInfoDto PixelInfos = 1 [json_name = "PixelInfos"]; */
        for (let i = 0; i < message.pixelInfos.length; i++)
            FullPixelInfoDto.internalBinaryWrite(message.pixelInfos[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FullPixelInfosDto
 */
export const FullPixelInfosDto = new FullPixelInfosDto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FullPixelInfoDto$Type extends MessageType<FullPixelInfoDto> {
    constructor() {
        super("FullPixelInfoDto", [
            { no: 1, name: "Position", kind: "message", jsonName: "Position", T: () => PositionDto },
            { no: 2, name: "CreationDate", kind: "message", jsonName: "CreationDate", T: () => Timestamp },
            { no: 3, name: "Color", kind: "message", jsonName: "Color", T: () => ColorDto }
        ]);
    }
    create(value?: PartialMessage<FullPixelInfoDto>): FullPixelInfoDto {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<FullPixelInfoDto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FullPixelInfoDto): FullPixelInfoDto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* PositionDto Position = 1 [json_name = "Position"];*/ 1:
                    message.position = PositionDto.internalBinaryRead(reader, reader.uint32(), options, message.position);
                    break;
                case /* google.protobuf.Timestamp CreationDate = 2 [json_name = "CreationDate"];*/ 2:
                    message.creationDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.creationDate);
                    break;
                case /* ColorDto Color = 3 [json_name = "Color"];*/ 3:
                    message.color = ColorDto.internalBinaryRead(reader, reader.uint32(), options, message.color);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FullPixelInfoDto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* PositionDto Position = 1 [json_name = "Position"]; */
        if (message.position)
            PositionDto.internalBinaryWrite(message.position, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp CreationDate = 2 [json_name = "CreationDate"]; */
        if (message.creationDate)
            Timestamp.internalBinaryWrite(message.creationDate, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* ColorDto Color = 3 [json_name = "Color"]; */
        if (message.color)
            ColorDto.internalBinaryWrite(message.color, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FullPixelInfoDto
 */
export const FullPixelInfoDto = new FullPixelInfoDto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PositionDto$Type extends MessageType<PositionDto> {
    constructor() {
        super("PositionDto", [
            { no: 1, name: "X", kind: "scalar", jsonName: "X", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "Y", kind: "scalar", jsonName: "Y", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PositionDto>): PositionDto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.x = 0;
        message.y = 0;
        if (value !== undefined)
            reflectionMergePartial<PositionDto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PositionDto): PositionDto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 X = 1 [json_name = "X"];*/ 1:
                    message.x = reader.int32();
                    break;
                case /* int32 Y = 2 [json_name = "Y"];*/ 2:
                    message.y = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PositionDto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 X = 1 [json_name = "X"]; */
        if (message.x !== 0)
            writer.tag(1, WireType.Varint).int32(message.x);
        /* int32 Y = 2 [json_name = "Y"]; */
        if (message.y !== 0)
            writer.tag(2, WireType.Varint).int32(message.y);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PositionDto
 */
export const PositionDto = new PositionDto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ColorDto$Type extends MessageType<ColorDto> {
    constructor() {
        super("ColorDto", [
            { no: 1, name: "R", kind: "scalar", jsonName: "R", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "G", kind: "scalar", jsonName: "G", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "B", kind: "scalar", jsonName: "B", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<ColorDto>): ColorDto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.r = 0;
        message.g = 0;
        message.b = 0;
        if (value !== undefined)
            reflectionMergePartial<ColorDto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ColorDto): ColorDto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float R = 1 [json_name = "R"];*/ 1:
                    message.r = reader.float();
                    break;
                case /* float G = 2 [json_name = "G"];*/ 2:
                    message.g = reader.float();
                    break;
                case /* float B = 3 [json_name = "B"];*/ 3:
                    message.b = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ColorDto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float R = 1 [json_name = "R"]; */
        if (message.r !== 0)
            writer.tag(1, WireType.Bit32).float(message.r);
        /* float G = 2 [json_name = "G"]; */
        if (message.g !== 0)
            writer.tag(2, WireType.Bit32).float(message.g);
        /* float B = 3 [json_name = "B"]; */
        if (message.b !== 0)
            writer.tag(3, WireType.Bit32).float(message.b);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ColorDto
 */
export const ColorDto = new ColorDto$Type();
/**
 * @generated ServiceType for protobuf service PixelInfo
 */
export const PixelInfo = new ServiceType("PixelInfo", [
    { name: "GetPixelInfoHistories", options: {}, I: Empty, O: PixelInfoHistoriesDto },
    { name: "CreatePixelInfos", options: {}, I: CreatePixelInfosDto, O: Empty },
    { name: "SubscribePixelInfosUpdates", serverStreaming: true, options: {}, I: Empty, O: FullPixelInfosDto }
]);
